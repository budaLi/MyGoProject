package main

import (
	"fmt"
	"strconv"
	"time"
)

//Go主线程 有程序员可以直接成为线程 也可以理解为进程
//在一个go线程上 可以起多个协程 协程是轻量级的线程 这是在编译器上做的优化

//go协程的特点
//1.有独立的栈空间  一旦开启一个协程 数据空间是独立的
//2.共享程序堆空间	多个协程可以有共享
//3.调度由用户控制	协程完全由用户控制
//4.协程是轻量级的线程

//如果主线程结束 而子线程没有结束 它也会退出

//主线程是一个物理线程 是直接作用在cpu上的 是重量级的 非常消耗cpu资源
//协程是从主线程开启的 是轻量级的线程 是逻辑态 对资源消耗相对较小
//go的协程机制是非常重要的特点 可以轻松开启上万个协程 其他编程语言
//的并发机制一般是基于线程的 开启过多的线程 资源消耗大
func main() {
	go test() //使用go关键字开启协程
	for i := 0; i < 10; i++ {
		fmt.Println("主线程中输出" + strconv.Itoa(i))
		time.Sleep(time.Second)
	}
}

func test() {
	for i := 0; i < 10; i++ {
		fmt.Println("子线程中输出" + strconv.Itoa(i))
		time.Sleep(time.Second)
	}
}
